diff --git a/node_modules/realayers/dist/index.cjs.js b/node_modules/realayers/dist/index.cjs.js
index 98d74cc..d17555b 100644
--- a/node_modules/realayers/dist/index.cjs.js
+++ b/node_modules/realayers/dist/index.cjs.js
@@ -271,9 +271,9 @@ const useDrawer = (prop) => {
         setInternalOpen(false);
         onClose === null || onClose === void 0 ? void 0 : onClose();
     }, [onClose]);
-    const onToggleOpen = React.useCallback(() => {
-        setInternalOpen(!open);
-    }, []);
+    const onToggleOpen = () => {
+        setInternalOpen(!internalOpen);
+    }
     const Component = React.useCallback((props) => (React__default['default'].createElement(Drawer, Object.assign({}, props, { open: internalOpen, onClose: onCloseInternal }))), [internalOpen, onCloseInternal]);
     return {
         isOpen: internalOpen,
diff --git a/node_modules/realayers/dist/index.esm.js b/node_modules/realayers/dist/index.esm.js
index 8dcce42..b00f566 100644
--- a/node_modules/realayers/dist/index.esm.js
+++ b/node_modules/realayers/dist/index.esm.js
@@ -261,9 +261,9 @@ const useDrawer = (prop) => {
         setInternalOpen(false);
         onClose === null || onClose === void 0 ? void 0 : onClose();
     }, [onClose]);
-    const onToggleOpen = useCallback(() => {
-        setInternalOpen(!open);
-    }, []);
+    const onToggleOpen = () => {
+        setInternalOpen(!internalOpen);
+    }
     const Component = useCallback((props) => (React.createElement(Drawer, Object.assign({}, props, { open: internalOpen, onClose: onCloseInternal }))), [internalOpen, onCloseInternal]);
     return {
         isOpen: internalOpen,
diff --git a/node_modules/realayers/dist/index.js b/node_modules/realayers/dist/index.js
index 0906d66..3805fd8 100644
--- a/node_modules/realayers/dist/index.js
+++ b/node_modules/realayers/dist/index.js
@@ -267,9 +267,9 @@
             setInternalOpen(false);
             onClose === null || onClose === void 0 ? void 0 : onClose();
         }, [onClose]);
-        const onToggleOpen = React.useCallback(() => {
-            setInternalOpen(!open);
-        }, []);
+        const onToggleOpen = () => {
+            setInternalOpen(!internalOpen);
+        };
         const Component = React.useCallback((props) => (React__default['default'].createElement(Drawer, Object.assign({}, props, { open: internalOpen, onClose: onCloseInternal }))), [internalOpen, onCloseInternal]);
         return {
             isOpen: internalOpen,
